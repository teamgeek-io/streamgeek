---
alwaysApply: false
---

# Agent Development Guidelines

## Agent Architecture

The agent is a Node.js server that accepts tus uploads and runs FFmpeg encoding. Reference [documentation/planning.md](mdc:documentation/planning.md) for complete specifications.

## Key Components

- **tus-node-server**: Handle resumable file uploads at `/files` endpoint
- **FFmpeg**: Convert uploaded videos to HLS format
- **Cloudflare R2**: Upload HLS segments and playlist
- **Orchestrator callback**: Report job completion

## Environment Variables

```env
AGENT_ID=agent-001
AGENT_FQDN=https://agent-001.example.com
ORCHESTRATOR_API=https://streamgeek.io/api/orchestator
R2_ACCESS_KEY_ID=xxx
R2_SECRET_ACCESS_KEY=xxx
R2_BUCKET=streamgeek
```

## Agent Logic Flow

```typescript
// On startup
startTusServer();
pollForHeartbeats();

// On tus upload complete
async function onUploadComplete(file) {
  await encodeToHLS(file.path);
  await uploadToR2();
  await reportJobCompletion();
}
```

## Development Notes

- Use HonoJS + tus-node-server for upload handling
- Implement FFmpeg HLS conversion with proper error handling
- Upload results to R2 with organized folder structure
- Report completion to orchestrator via callback
- Handle agent heartbeats for load balancing

# Agent Development Guidelines

## Agent Architecture

The agent is a Node.js server that accepts tus uploads and runs FFmpeg encoding. Reference [documentation/planning.md](mdc:documentation/planning.md) for complete specifications.

## Key Components

- **tus-node-server**: Handle resumable file uploads at `/files` endpoint
- **FFmpeg**: Convert uploaded videos to HLS format
- **Cloudflare R2**: Upload HLS segments and playlist
- **Orchestrator callback**: Report job completion

## Environment Variables

```env
AGENT_ID=agent-001
AGENT_FQDN=https://agent-001.example.com
ORCHESTRATOR_API=https://streamgeek.io/api/orchestator
R2_ACCESS_KEY_ID=xxx
R2_SECRET_ACCESS_KEY=xxx
R2_BUCKET=streamgeek
```

## Agent Logic Flow

```typescript
// On startup
startTusServer();
pollForHeartbeats();

// On tus upload complete
async function onUploadComplete(file) {
  await encodeToHLS(file.path);
  await uploadToR2();
  await reportJobCompletion();
}
```

## Development Notes

- Use HonoJS + tus-node-server for upload handling
- Implement FFmpeg HLS conversion with proper error handling
- Upload results to R2 with organized folder structure
- Report completion to orchestrator via callback
- Handle agent heartbeats for load balancing
