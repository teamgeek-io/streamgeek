---
alwaysApply: false
---

# UI Development Guidelines

## Next.js App Structure

The orchestrator app uses Next.js with Uppy for file uploads. Reference [documentation/planning.md](mdc:documentation/planning.md) for complete UI specifications.

## Key Pages

- `/upload` – Uppy-powered file upload to assigned agent
- `/status/:jobId` – Polls for job status and shows results

## Upload Flow Implementation

1. **Job Creation**: Call `POST /api/jobs/create` to get upload URL
2. **File Upload**: Use Uppy with `@uppy/tus` to upload directly to agent
3. **Status Polling**: Poll `GET /api/jobs/:id/status` for progress updates
4. **Result Display**: Show HLS playlist URL when complete

## Uppy Configuration

```typescript
import Uppy from "@uppy/core";
import Tus from "@uppy/tus";

const uppy = new Uppy().use(Tus, {
  endpoint: uploadUrl, // From orchestrator API
  retryDelays: [0, 1000, 3000, 5000],
});
```

## Development Patterns

- Use Next.js App Router for routing
- Implement proper loading states and error handling
- Use TypeScript for type safety
- Follow the upload flow: create job → upload → poll status → show results
- Use modern React patterns (hooks, context, etc.)

# UI Development Guidelines

## Next.js App Structure

The orchestrator app uses Next.js with Uppy for file uploads. Reference [documentation/planning.md](mdc:documentation/planning.md) for complete UI specifications.

## Key Pages

- `/upload` – Uppy-powered file upload to assigned agent
- `/status/:jobId` – Polls for job status and shows results

## Upload Flow Implementation

1. **Job Creation**: Call `POST /api/jobs/create` to get upload URL
2. **File Upload**: Use Uppy with `@uppy/tus` to upload directly to agent
3. **Status Polling**: Poll `GET /api/jobs/:id/status` for progress updates
4. **Result Display**: Show HLS playlist URL when complete

## Uppy Configuration

```typescript
import Uppy from "@uppy/core";
import Tus from "@uppy/tus";

const uppy = new Uppy().use(Tus, {
  endpoint: uploadUrl, // From orchestrator API
  retryDelays: [0, 1000, 3000, 5000],
});
```

## Development Patterns

- Use Next.js App Router for routing
- Implement proper loading states and error handling
- Use TypeScript for type safety
- Follow the upload flow: create job → upload → poll status → show results
- Use modern React patterns (hooks, context, etc.)
