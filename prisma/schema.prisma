// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"

  runtime                = "workerd"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid()) // User ID (UUID-based)
  username    String      @unique
  createdAt   DateTime    @default(now())

  credentials Credential[] // Relationship: One user can have many credentials
}

model Credential {
  id            String   @id @default(uuid()) // Internal DB ID
  userId        String   @unique // Every credential is linked to a specific user
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  credentialId  String   @unique // WebAuthn credential identifier
  publicKey     Bytes
  counter       Int      @default(0)
  
  @@index([credentialId])
  @@index([userId])
}



model Video {
  id          String      @id // Video ID (nanoid-based, generated in app code)
  title       String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  thumbnailUrl String?
  playlistUrl  String?
  duration     Int?

  @@index([id])
  jobs Job[]
}

enum JobStatus {
  queued
  uploading
  encoding
  done
  failed
}

model Job {
  id          String      @id @default(uuid()) // Job ID (UUID-based)
  videoId     String
  video       Video      @relation(fields: [videoId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  status      JobStatus      @default(queued) 
  agentId     String
  outputUrl     String?
  errorMessage  String?
  agent Agent @relation(fields: [agentId], references: [id])

  @@index([id])
  @@index([videoId])
  @@index([agentId])
}

model Agent {
  id          String      @id @default(uuid()) // Agent ID (UUID-based)
  url        String
  lastSeen    DateTime
  createdAt   DateTime    @default(now())
  jobs Job[]

  @@index([id])
}